# Importa bibliotecas necess√°rias
import random
import time

# Listas para armazenar hist√≥ricos e usu√°rios
historico_leituras = []
historico_alertas = []
usuarios = []

# Defini√ß√£o de limites para sensores
umidade_maximo = 75
temp_baixa = 20
temp_alta = 26
nivel_normal = 50
nivel_atencao = 100
nivel_alerta = 150
nivel_evacuacao = 200

def exibir_cabecalho():
    # Exibe o cabe√ßalho do sistema
    print("=" * 60)
    print("PLATAFORMA ALERTA SEGURO - CONTRA ENCHENTES")
    print("=" * 60)
    print()

def limpar():
    # Limpa a tela (simulado com v√°rias quebras de linha)
    print("\n" * 50)

def pausar():
    # Pausa at√© o usu√°rio pressionar Enter
    input("\n Aperte Enter para continuar...")

def simularTemperatura():
    # Simula leitura de temperatura
    return round(random.uniform(15, 35), 1)

def simularUmidade():
    # Simula leitura de umidade
    return round(random.uniform(40, 90), 1)

def simularNivelAgua():
    # Simula leitura do n√≠vel da √°gua
    return round(random.uniform(40, 250), 1)

def coletar_leituras(num_amostras=5, intervalo=1):
    # Coleta e calcula a m√©dia de 5 amostras dos sensores
    print("\nColetando √∫ltimas 5 amostras...\n")
    temperaturas = 0
    umidades = 0
    niveis = 0

    for i in range(num_amostras):
        print(f"Leitura {i+1}/{num_amostras}...")
        temperaturas += simularTemperatura()
        umidades += simularUmidade()
        niveis += simularNivelAgua()
        if i <= num_amostras:
            time.sleep(intervalo)
    
    media_temperaturas = temperaturas / num_amostras
    media_umidades = umidades / num_amostras
    media_niveis = niveis / num_amostras

    # Dicion√°rio que armazena as m√©dias das leituras dos sensores
    leituras = {
        'temperatura': round(media_temperaturas, 1),  # valor m√©dio da temperatura
        'umidade': round(media_umidades, 1),          # valor m√©dio da umidade
        'nivel_agua': round(media_niveis, 1)          # valor m√©dio do n√≠vel da √°gua
    }

    historico_leituras.append(leituras)
    return leituras

def status_temperatura(temperatura):
    # Determina o status da temperatura
    if temperatura <= temp_baixa:
        return 'BAIXA', 'TEMPERATURA BAIXA', 'verde'
    elif temperatura < temp_alta:
        return 'NORMAL', 'TEMPERATURA NORMAL', 'verde'
    else:
        return 'CRITICO', 'TEMPERATURA ALTA', 'amarelo'

def status_umidade(umidade):
    # Determina o status da umidade
    if umidade <= umidade_maximo:
        return 'NORMAL', 'UMIDADE OK', 'verde' 
    else:
        return 'UMIDO', 'UMIDADE ALTA', 'amarelo'

def status_nivel(nivel):
    # Determina o status do n√≠vel da √°gua
    if nivel < nivel_atencao:
        return 'NORMAL', 'Nivel de √°gua normal', 'verde'
    elif nivel < nivel_alerta:
        return 'ATEN√á√ÉO', 'ATEN√á√ÉO: N√≠vel de √°gua alto ', 'amarelo'
    elif nivel < nivel_evacuacao:
        return 'ALERTA', 'ALERTA: N√≠vel de √°gua em alerta', 'vermelho'
    else:
        return 'EVACUA√á√ÉO', 'EVACUAR AGORA: NIVEL EXTREMO', 'vermelho'

def analisar_leituras():
    # Analisa as leituras e retorna o status de cada sensor e geral
    leituras = coletar_leituras()
    status_temp = status_temperatura(leituras['temperatura'])
    status_umid = status_umidade(leituras['umidade'])
    status_niv = status_nivel(leituras['nivel_agua'])

    status_geral = 'NORMAL'
    cor_led_geral = 'verde'
    ativar_buzzer = False

    # Avalia o status geral com base nos sensores
    for status, _, cor_led in [status_umid, status_niv]:
        if status == 'EVACUA√á√ÉO':
            status_geral = 'EVACUA√á√ÉO - √ÅGUA ACIMA DE 2 METROS'
            cor_led_geral = 'vermelho'
            ativar_buzzer = True
        elif status == 'ALERTA':
            status_geral = 'ALERTA - N√çVEL DE √ÅGUA ALTO'
            cor_led_geral = 'vermelho'
            ativar_buzzer = True
        elif status == 'ATEN√á√ÉO':
            status_geral = 'ATEN√á√ÉO - NIVEL DE √ÅGUA ACIMA DO NORMAL'
            cor_led_geral = 'amarelo'
        elif status == 'UMIDO' and status_temp[0] == 'CRITICO':
            status_geral = 'ATEN√á√ÉO - GRANDES CHANCES DE CHUVA PESADA'
            cor_led_geral = 'amarelo'
    
    # Dicion√°rio que re√∫ne o resultado da an√°lise das leituras dos sensores
    resultado = {
        'temperatura': {
            'valor': leituras['temperatura'],      # valor m√©dio da temperatura
            'status': status_temp[0],              # status da temperatura (ex: NORMAL)
            'mensagem': status_temp[1],            # mensagem descritiva
            'cor_led': status_temp[2]              # cor do LED correspondente
        },
        'umidade': {
            'valor': leituras['umidade'],          # valor m√©dio da umidade
            'status': status_umid[0],              # status da umidade
            'mensagem': status_umid[1],            # mensagem descritiva
            'cor_led': status_umid[2]              # cor do LED correspondente
        },
        'nivel_agua': {
            'valor': leituras['nivel_agua'],       # valor m√©dio do n√≠vel da √°gua
            'status': status_niv[0],               # status do n√≠vel da √°gua
            'mensagem': status_niv[1],             # mensagem descritiva
            'cor_led': status_niv[2]               # cor do LED correspondente
        },
        'geral': {
            'status': status_geral,                # status geral do sistema
            'cor_led': cor_led_geral,              # cor do LED geral
            'buzzer': ativar_buzzer                # indica se o buzzer deve ser ativado
        }
    }

    if status_geral != 'NORMAL':
        registrar_alerta(resultado)

    return resultado

def registrar_alerta(resultado_analise):
    # Registra um alerta no hist√≥rico
    # Dicion√°rio que representa um alerta gerado pelo sistema
    alerta = {
        'status': resultado_analise['geral']['status'],           # status geral do alerta
        'temperatura': resultado_analise['temperatura']['valor'], # valor da temperatura no momento do alerta
        'umidade': resultado_analise['umidade']['valor'],         # valor da umidade no momento do alerta
        'nivel_agua': resultado_analise['nivel_agua']['valor']    # valor do n√≠vel da √°gua no momento do alerta
    }
    historico_alertas.append(alerta)

def exibir_resultado(resultado_analise):
    # Exibe o resultado da an√°lise das leituras
    limpar()
    exibir_cabecalho()
    temp = resultado_analise['temperatura']
    print(f"Temperatura: {temp['valor']}¬∫C - {temp['mensagem']}")

    umid = resultado_analise['umidade']
    print(f"Umidade: {umid['valor']}% - {umid['mensagem']}")

    nivel_agua = resultado_analise['nivel_agua']
    print(f"N√≠vel da √°gua: {nivel_agua['valor']}cm - {nivel_agua['mensagem']}")

    geral = resultado_analise['geral']
    print(f"\nStatus Geral: {geral['status']}")

    if geral['buzzer']:
        print("\nüîä BEEP! BEEP! BEEP! üîä")

def exibir_historico():
    # Exibe o hist√≥rico de alertas registrados
    limpar()
    exibir_cabecalho()    

    if not historico_alertas:
        print('N√£o h√° hist√≥rico de alertas...')
    print("\nHIST√ìRICO DE ALERTAS")

    for i, alerta in enumerate(historico_alertas,1):
        print(f"\n")
        print(f"Alerta {i}")
        print(f"    Status {alerta['status']}")
        print(f"    Nivel da √°gua: {alerta['nivel_agua']}")
        print(f"    Umidade: {alerta['umidade']}")
        print(f"    Temperatura: {alerta['temperatura']}")

def cadastrar_usuario():
    # Cadastra um novo usu√°rio no sistema
    limpar()
    exibir_cabecalho()

    nome = ''
    while not nome:
        nome = input('Qual seu nome? ')
        if not nome:
            print("Erro: Nome n√£o pode ser vazio.")

    email = ''
    while (not email) or ('@' not in email) or ('.' not in email):
        email = input('Qual seu email? ')
        if (not email) or ('@' not in email) or ('.' not in email):
            print("Erro: Email inv√°lido")

    telefone = ''
    while (not telefone) or (len(telefone) < 10) or (not telefone.isdigit()):
        telefone = input('Qual seu telefone? (Apenas digitos) ')
        if (not telefone) or (len(telefone) < 10) or (not telefone.isdigit()):
            print("Erro: telefone inv√°lido.")

    regiao = ''
    while not regiao:
        regiao = input('Qual regi√£o voc√™ mora?')
        if not regiao:
            print("Erro: Nome n√£o pode ser vazio.")

    print('Voc√™ prefere ser notificado por...')

    canal_preferido = ""
    while canal_preferido not in ['sms', 'email']:
        canal_preferido = input('"sms" ou "email"?')
        if canal_preferido not in ['sms', 'email']:
            print('Resposta inv√°lida. Responda com "sms" ou "email"')

    print('Deseja ser notificado em n√≠veis de: ')
    pref_atencao = ""
    while pref_atencao not in ['s', 'n']:
        pref_atencao = input('Aten√ß√£o (s/n): ')
        if pref_atencao not in ['s', 'n']:
            print('Inv√°lido. Responda com "s" ou "n"')

    pref_alerta = ""
    while pref_alerta not in ['s', 'n']:
        pref_alerta = input('Alerta (s/n): ')
        if pref_alerta not in ['s', 'n']:
            print('Inv√°lido. Responda com "s" ou "n"')

    pref_evacuacao = ""
    while pref_evacuacao not in ['s', 'n']:
        pref_evacuacao = input('Evacua√ß√£o (s/n): ')
        if pref_evacuacao not in ['s', 'n']:
            print('Inv√°lido. Responda com "s" ou "n"')

    # Dicion√°rio que armazena os dados do usu√°rio cadastrado
    usuario = {
        'nome': nome,                         # nome do usu√°rio
        'email': email,                       # email do usu√°rio
        'telefone': telefone,                 # telefone do usu√°rio
        'regiao': regiao,                     # regi√£o onde mora
        'canal_preferido': canal_preferido,   # canal de notifica√ß√£o preferido
        'pref_atencao': pref_atencao == 's',  # prefer√™ncia por receber alerta de aten√ß√£o
        'pref_alerta': pref_alerta == 's',    # prefer√™ncia por receber alerta de alerta
        'pref_evacuacao': pref_evacuacao == 's' # prefer√™ncia por receber alerta de evacua√ß√£o
    }
    usuarios.append(usuario)
    print("\nUsu√°rio cadastrado com sucesso!")
    pausar()

def lista_usuario():
    # Exibe a lista de usu√°rios cadastrados
    limpar()
    exibir_cabecalho()

    if not usuarios:
        print('N√£o h√° usu√°rios registrados')
    for usuario in usuarios:
        print("-" * 40)
        print(f"    Nome: {usuario['nome']}")
        print(f"    Email: {usuario['email']}")
        print(f"    Telefone: {usuario['telefone']}")
        print(f"    Regi√£o: {usuario['regiao']}")
        print(f"    Canal preferido: {usuario['canal_preferido']}")
        print(f"    - Aten√ß√£o: {"Sim" if usuario['pref_atencao'] else 'N√£o'}")
        print(f"    - Alerta: {'Sim' if usuario['pref_alerta'] else 'N√£o'}")
        print(f"    - Evacua√ß√£o: {'Sim' if usuario['pref_evacuacao'] else 'N√£o'}")
        print("-" * 40)
    pausar()

def quiz():
    # Executa o quiz educativo sobre enchentes
    exibir_cabecalho()
    limpar()
    
    questao_atual = 0
    pontos = 0
    questions = [
        {
            "question": "Qual √© a primeira medida a ser tomada ao receber um alerta de enchente?",
            "options": [
                "A. Verificar as redes sociais para confirmar a informa√ß√£o",
                "B. Reunir documentos importantes, medicamentos e itens essenciais",
                "C. Esperar at√© que a √°gua comece a subir para tomar uma decis√£o",
                "D. Ligar para todos os vizinhos para avisar"
            ],
            "correct": 'B'
        },
        {
            "question": "Qual destes itens N√ÉO deve fazer parte de um kit de emerg√™ncia para enchentes?",
            "options": [
                "A. Lanternas e pilhas extras",
                "B. Alimentos n√£o perec√≠veis",
                "C. Equipamentos eletr√¥nicos de valor",
                "D. √Ågua pot√°vel"
            ],
            "correct": 'C'
        },
        {
            "question": "Durante uma enchente, √© seguro:",
            "options": [
                "A. Atravessar √°reas alagadas a p√©",
                "B. Dirigir atrav√©s de √°reas com √°gua corrente",
                "C. Permanecer em locais altos e seguros",
                "D. Tocar em equipamentos el√©tricos molhados"
            ],
            "correct": 'C'
        },
        {
            "question": "Qual √© o principal fator que contribui para enchentes em √°reas urbanas?",
            "options": [
                "A. Impermeabiliza√ß√£o do solo",
                "B. Plantio de √°rvores",
                "C. Coleta seletiva de lixo",
                "D. Uso de energia renov√°vel"
            ],
            "correct": 'A'
        },
        {
            "question": "Ap√≥s uma enchente, antes de retornar para casa, √© importante:",
            "options": [
                "A. Ligar imediatamente todos os equipamentos el√©tricos para verificar se funcionam",
                "B. Verificar se h√° danos estruturais e se √© seguro entrar",
                "C. Beber a √°gua da torneira para verificar se est√° contaminada",
                "D. Limpar imediatamente com √°gua sanit√°ria pura"
            ],
            "correct": 'B'
        },
        {
            "question": "Qual destas doen√ßas N√ÉO est√° comumente associada a enchentes?",
            "options": [
                "A. Leptospirose",
                "B. Dengue",
                "C. Sarampo",
                "D. Hepatite A"
            ],
            "correct": 'B'
        },
        {
            "question": "Qual √© a melhor maneira de se manter informado durante uma situa√ß√£o de enchente?",
            "options": [
                "A. Confiar apenas em informa√ß√µes de redes sociais",
                "B. Ignorar alertas oficiais se n√£o estiver chovendo no momento",
                "C. Acompanhar boletins oficiais da Defesa Civil e meteorologia",
                "D. Sair para verificar pessoalmente o n√≠vel dos rios"
            ],
            "correct": 'C'
        },
        {
            "question": "Em caso de evacua√ß√£o devido a enchentes, o que voc√™ deve fazer com animais de estima√ß√£o?",
            "options": [
                "A. Deix√°-los em casa com bastante comida e √°gua",
                "B. Solt√°-los para que encontrem abrigo por conta pr√≥pria",
                "C. Lev√°-los junto no processo de evacua√ß√£o",
                "D. Entreg√°-los aos vizinhos que n√£o precisam evacuar"
            ],
            "correct": 'C'
        },
        {
            "question": "Qual destas a√ß√µes ajuda a prevenir enchentes em √°reas urbanas?",
            "options": [
                "A. Jogar lixo em bueiros e c√≥rregos",
                "B. Remover √°rvores e vegeta√ß√£o",
                "C. Impermeabilizar todo o quintal",
                "D. Implementar sistemas de capta√ß√£o de √°gua da chuva"
            ],
            "correct": 'D'
        },
        {
            "question": "Qual √© o papel da tecnologia no monitoramento e preven√ß√£o de enchentes?",
            "options": [
                "A. Apenas registrar dados hist√≥ricos sem utilidade pr√°tica",
                "B. Substituir completamente a necessidade de evacua√ß√£o",
                "C. Prever com 100% de precis√£o quando ocorrer√£o enchentes",
                "D. Fornecer alertas antecipados e monitorar n√≠veis de √°gua em tempo real"
            ],
            "correct": 'D'
        }
    ]
    for i, questao in enumerate(questions,1):
        questao_atual += 1
        exibir_cabecalho()
        print(f"Quest√£o {i}:\n")
        print(f"{questao['question']}\n")
        print(f"    {questao['options'][0]}\n")
        print(f"    {questao['options'][1]}\n")
        print(f"    {questao['options'][2]}\n")
        print(f"    {questao['options'][3]}\n")
        resposta = input('\nDigite a alternativa. ').upper()
        
        if len(resposta) > 1 or resposta not in ['A', 'B', 'C', 'D']:
            while len(resposta) > 1 or resposta not in ['A', 'B', 'C', 'D']:
                print('Altern√°tiva inv√°lida')
                resposta = input('\nDigite a alternativa. ').upper()
        
        if resposta == questao['correct']:
            pontos += 1

        limpar()
    
    exibir_cabecalho()
    print('Quiz finalizado!')
    print(f"Total de pontos: {pontos}/10")
        
    pausar()

def menu_principal():
    # Exibe o menu principal e retorna a op√ß√£o escolhida
    limpar()
    exibir_cabecalho()
    print("MENU PRINCIPAL")
    print("=" * 40)
    print("1. Monitoramente de enchentes")
    print("2. Historico de alertas")
    print("3. Cadastrar Usu√°rio")
    print("4. Lista de usu√°rios")
    print("5. Quiz sobre enchentes")
    print('0. Sair')
    print("=" * 40)
    opcao = input("Escolha uma op√ß√£o: ")
    return opcao

def main():
    # Fun√ß√£o principal do sistema
    limpar()
    exibir_cabecalho()
    while True:
        opcao = menu_principal()
        if opcao == '1':
            resultado = analisar_leituras()
            exibir_resultado(resultado)
            pausar()
        elif opcao == '2':
            exibir_historico()
            pausar()
        elif opcao == '3':
            cadastrar_usuario()
        elif opcao == '4':
            lista_usuario()
        elif opcao == '5':
            quiz()
        elif opcao == '0':
            print('\nObrigado por utilizar o sistema Alerta Seguro!\n')
            break

if __name__ == "__main__":
    # Executa o sistema se o arquivo for rodado diretamente
    main()